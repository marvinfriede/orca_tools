#!/usr/bin/env python3
# coding: utf-8

import os
import sys
import glob
import argparse


def main():
  parser = argparse.ArgumentParser(
      description='Check all ORCA files for successful run.')
  parser.add_argument("-v", '--verbose', nargs='?', const=0, type=int,
                      help="Print more. Number of rows optional. 0 prints everything")
  args = parser.parse_args()


  failed = []
  filelist = getFileList()
  print(f"Going to check {len(filelist)} files...")

  for i, filename in enumerate(filelist):
    progress(i, len(filelist))
    count_criter = 0
    num_jobs = 1

    # ORCA files
    if "orca" in filename:
      with open(filename, errors='ignore') as f:
        for line in f:
          # get number of jobs in multijob file
          if "JOBS TO BE PROCESSED THIS RUN" in line:
            num_jobs = int(line.strip().split()[3])
            continue

          if "SCF CONVERGED AFTER" in line:
            count_criter += 1
            continue

          if "NOT FULLY CONVERGED" in line:
            failed.append(filename)
            break  

        # check convergence for my multijob
        if count_criter != num_jobs:
          failed.append(filename)

    # Q-CHEM files
    elif "job.out" in filename:
      with open(filename, errors='ignore') as f:
        for line in f:
          # get number of jobs in multijob file
          if line.startswith("User input:") and "of" in line:
            num_jobs = int(line.strip().split()[-1])
            continue

          if "Convergence criterion met" in line:
            count_criter += 1
            continue

        # check convergence for my multijob
        if count_criter != num_jobs:
          failed.append(filename)

    # unrecognized files
    else:
      print(f"File '{filename}' not recognized.")


  print("\nFinished!\n")
  if len(failed) == 0:
    print("All jobs successful!!")
  else:
    print("WARNING!!! Convergence not reached in:")
    for i in failed:
      print(i)
  

def getFileList():
  filelist = []

  print("Compiling file list...")
  for file in glob.glob('./**/orca*.out', recursive=True):
    filelist.append(file)

  for file in glob.glob('./**/job.out', recursive=True):
    filelist.append(file)

  if len(filelist) == 0:
    sys.exit("No '.out' files found.")

  return filelist


def progress(count, total, status=''):
  bar_len = 60
  filled_len = int(round(bar_len * count / float(total)))

  percents = round(100.0 * count / float(total), 1)
  bar = '=' * filled_len + '-' * (bar_len - filled_len)

  sys.stdout.write('[%s] %s%s %s\r' % (bar, percents, '%', status))
  sys.stdout.flush()


if __name__ == '__main__':
  main()
